apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: sync-redis-hackathon-2022
  namespace: argo
spec:
  entrypoint: data-load
  onExit: exit-handler
  spec:
# #   must complete in below seconds
#   activeDeadlineSeconds: 100
# #   keep workflows till below seconds
#   ttlStrategy:
#     secondsAfterCompletion: 200
#   delete all pods as soon as they complete
  podGC:
    strategy: OnPodCompletion

  templates:
  - name: data-load
    dag:
      tasks:
      - name: load-data-in-postgres
        template: echo
        arguments:
          parameters: [{name: message, value: Loading data in Postgres HI_Ref schema}]
      - name: load-data-in-redis
        depends: "validate-postgres-data"
        template: echo
        arguments:
          parameters: [{name: message, value: Loading data in Redis}]
      - name: validate-postgres-data
        depends: "load-data-in-postgres"
        template: echo
        arguments:
          parameters: [{name: message, value: Validating Postgres Data}]
      - name: place-holder-task
        depends: "validate-postgres-data"
        template: echo
        arguments:
          parameters: [{name: message, value: run this job after data load in postres}]
      - name: validating-redis-keys
        depends: "load-data-in-redis"
        template: echo-failure
        arguments:
          parameters: [{name: message, value: Validating Redis Keys}]

  - name: echo
    inputs:
      parameters:
      - name: message
    container:
      image: alpine:3.7
      command: [echo, "{{inputs.parameters.message}}"]
      
      
  - name: echo-failure
    inputs:
      parameters:
      - name: message
    container:
      image: alpine:3.7
      command: [ech, "{{inputs.parameters.message}}"]
      
  - name: exit-handler
    steps:
    - - name: notify
        template: send-email
      - name: celebrate
        template: celebrate
        when: "{{workflow.status}} == Succeeded"
      - name: cry
        template: cry
        when: "{{workflow.status}} != Succeeded"
  - name: send-email
    container:
      image: alpine:latest
      command: [sh, -c]
      # Tip: {{workflow.failures}} is a JSON list. If you're using bash to read it, we recommend using jq to manipulate
      # it. For example:
      #
      # echo "{{workflow.failures}}" | jq -r '.[] | "Failed Step: \(.displayName)\tMessage: \(.message)"'
      #
      # Will print a list of all the failed steps and their messages. For more info look up the jq docs.
      # Note: jq is not installed by default on the "alpine:latest" image, however it can be installed with "apk add jq"
      args: ["echo send e-mail: {{workflow.name}} {{workflow.status}} {{workflow.duration}}. Failed steps {{workflow.failures}}"]
  - name: celebrate
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo hooray!"]
  - name: cry
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo boohoo!"]
